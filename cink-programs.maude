mod CINK-PROGRAMS is including CINK-SYNTAX .

 ops sumPgm  countPrimesPgm testFunPgm findM arrayExample : -> StmtList .
 ops sumStmt primalityStmt : -> Stmt .
 ops sum primality find : -> Id .

 eq sumStmt = 
   int n ;
   int s ;
   n = 5 ;
---   scanf("%d",& n) ; 
   s = 0 ;
   while (!(n <= 0)) {
     s = s + n ;
     n = n + -1 ;
   }
   .

 eq sumPgm = 
   void main () {
     sumStmt 
     printf("%d;", s) ;
   }
   .

 eq countPrimesPgm =

 int primality ( int n )
 {
   int i ;
   int q ;
   int n ;
   int t ;
   int z ;
   i = 2 ;  q = n / i ;  t = 1 ;
   while (i <= q && 1 <= t) {
     x = i ;
     y = q ;
     z = i * q ;
     if (n <= z) t = 0 ; else { i = i + 1 ;  q = n / i ; }
   }
   return t ;
 } 

 void main () 
 {
   int m, n, s, t ;
   m = 10 ; s = 0 ; n = 2 ;
   while (n <= m) {
     t = primality ( n ) ;
     if (1  <= t) s = s + 1 ; 
     n = n + 1 ;
   }
   printf("%d;", n) ;
 } .

 eq testFunPgm = 

  int f () 
  {
     int x ;
     x = 3 ;
  }
  void main ()
  {
    int x ;
    x = f() ;
  } .

 eq findM = 
 
 int f ( int n )
 {
   int m = n ;
   int z = 0 ;
   while ( z == 0 )
   {
     m = m + 1 ; 
     int s = 2 ;
     while ( s <= n )
     {
      int v = n / s ;
      int w = m / s ;
      if( v * s == n && w * s == m ) z = 1 ;
      s = s + 1 ;
      }
    }
   return m ;
 }
 void main ()
 {
    int n = 6 ;
    int m = f ( n ) ;
    printf("%d;", m) ;
 } .

 eq arrayExample = 
  int a[50] ;
  int i ;
  i = 2 ;
  a[1] = a[7] ;
  a[i * 2] = 5 + a[i + 1] ;
  .

endm
